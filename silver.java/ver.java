🟢 型推論とは？
型推論 (var) とは、変数を宣言する際に 明示的に型を指定しなくても、
コンパイラが型を自動で推測してくれる機能;

✅ ローカル変数では使える;
public class TypeInferenceExample {
    public static void main(String[] args) {
        var message = "Hello"; // 型推論（String型）
        var number = 10;       // 型推論（int型）
        System.out.println(message + " " + number); // "Hello 10"
    }
}

🔴 フィールドの宣言には型推論（var）を使えない;
一方で、クラスのフィールド（インスタンス変数・クラス変数）では var を使うことはできない;

❌ コンパイルエラーになる例;
public class Example {
    var name = "Alice"; // ❌ エラー: フィールドに var は使えない
}

。

🔶 なぜフィールドに型推論を使えないのか？
理由①: クラスの構造が明確であるべき
Javaは 型安全性 を重視する言語。
クラスのフィールドは クラスの外部からもアクセスされる可能性があり、明示的に型を指定しておくことで、
プログラムの可読性とメンテナンス性が向上する。
もし var を許可すると、フィールドの型が不明確になり、コードの可読性が低下 する。
🔹 例

public class Example {
    var value = 100; // ❌ 型が明確ではないのでエラー
}

理由②: フィールドの型はコンパイル時に固定する必要がある
Javaのフィールドは コンパイル時に型を決定する必要がある。
var はローカル変数でのみ使える機能であり、フィールドでは型を明示しないとコンパイル時に確定できない。
🔹 例

public class Example {
    var data; // ❌ エラー: 型を推測できない
}

data に初期値を設定しないと 型が推測できない（int なのか String なのか分からない）。
Javaはクラスのフィールドの型をコンパイル時に確定させる必要があるため、エラーになる。

理由③: クラスのフィールドは「型の一貫性」を保つ必要がある
フィールドは オブジェクトの状態を管理する重要な要素 であり、一度決めた型を一貫して使う 必要がある。
var を使ってしまうと、意図しない型変更が発生するリスクがある。
🔹 例

public class Example {
    var data = 10; // ❌ エラー
}
もし var が許可されると、開発者が data の型を int だと思っていたのに、
実際には double になってしまう可能性がある。

✅ ローカル変数
メソッドの中 で定義されている変数。
その メソッド内でのみ使える（スコープがメソッド内に限定される）。
メソッドが終わると、変数は破棄される（メモリ上から消える）。
🔹 ローカル変数の例

public class Example {
    public void sayHello() {
        String message = "Hello!"; // ✅ ローカル変数（メソッド内で宣言）
        System.out.println(message);
    }
}
🔸 message は メソッド sayHello() 内で宣言 されているので、ローカル変数 です。
🔸 sayHello() が終わると message は消える。

✅ フィールド
クラスの中 & メソッドの外 で定義されている変数。
インスタンス変数（オブジェクトごとに管理される変数）や 
クラス変数（全インスタンスで共有される変数）になる。
クラスの中で広く使える（メソッド間で共有可能）。
オブジェクトが存在する間、メモリに残る（static をつけるとクラスが存在する間ずっと残る）。
🔹 フィールドの例
public class Example {
    String message = "Hello!"; // ✅ フィールド（クラスのメンバ変数）

    public void sayHello() {
        System.out.println(message); // フィールドを使う
    }
}
🔸 message は クラスの中 & メソッドの外 で定義されているので、フィールド です。
🔸 クラスのどのメソッドからでも message にアクセス可能。

✅ まとめ：見分けるポイント

チェックポイント	     ローカル変数	              フィールド
宣言場所	            メソッドの中	               クラスの中（メソッドの外）
スコープ	            メソッド内だけ	             クラス全体
寿命	                メソッドが終わると消える	    オブジェクトが存在する間は残る
static をつけられる？	 ❌ つけられない	             ✅ つけられる（クラス変数）
this をつけられる？	   ❌ つけられない	             ✅ つけられる
🔹 判断基準まとめ
メソッドの中だけで使える → ローカル変数 ✅
クラスの中で複数のメソッドから使える → フィールド ✅
static をつけられる → フィールド ✅
this を使って参照できる → フィールド ✅